package com.eneskkoc.shopcase.ui.fragmentimport android.annotation.SuppressLintimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.Fragmentimport androidx.fragment.app.viewModelsimport androidx.navigation.Navigationimport com.afollestad.materialdialogs.LayoutModeimport com.afollestad.materialdialogs.MaterialDialogimport com.afollestad.materialdialogs.bottomsheets.BottomSheetimport com.afollestad.materialdialogs.list.listItemsSingleChoiceimport com.eneskkoc.shopcase.Rimport com.eneskkoc.shopcase.base.BaseAdapterimport com.eneskkoc.shopcase.data.model.product.Dataimport com.eneskkoc.shopcase.databinding.FragmentProductBindingimport com.eneskkoc.shopcase.databinding.ItemProductBindingimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass ProductFragment : Fragment() {    private val viewModel by viewModels<ProductViewModel>()    private lateinit var binding: FragmentProductBinding    private lateinit var adapter: BaseAdapter<ItemProductBinding, Data>    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?,    ): View {        binding = FragmentProductBinding.inflate(layoutInflater)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        arguments.let { bundle ->            val sort = "Price"            val categoryId: String? = bundle?.let { arg -> ProductFragmentArgs.fromBundle(arg).categoryId }            categoryId?.let { id -> viewModel.getProduct(id, sort) }        }        adapter = object : BaseAdapter<ItemProductBinding, Data>(R.layout.item_product) {            override fun bindView(binding: ItemProductBinding, item: Data?, adapterPosition: Int) {                binding.viewModel = item                if (item?.campaignPrice == null) {//campaign değeri null gelenleri kapatma                    binding.tvCampaign.visibility = View.GONE                } else {                    binding.tvCampaign.visibility = View.VISIBLE                }            }            override fun clickListener(item: Data?, position: Int, binding: ItemProductBinding) {                viewModel._productLiveData.observe(viewLifecycleOwner) {                    openDetail(it?.get(position)?.id)                }            }        }        binding.viewModel = viewModel        binding.recyclerviewPro.adapter = adapter        viewModel.data.observe(viewLifecycleOwner) { state ->            when (state) {                is ProductViewModel.State.OnCompleted -> onCompleted()                is ProductViewModel.State.OnSort -> onSort()                is ProductViewModel.State.OnError -> onMessage(state.error)            }        }        binding.tvList.setOnClickListener {            onSortClick()        }    }    @SuppressLint("CheckResult")    private fun onSortClick() {//sıralama için tıklanınca        val myItems = listOf("Price", "Title", "PublishmentDate")        MaterialDialog(requireContext(), BottomSheet(LayoutMode.WRAP_CONTENT)).show {            listItemsSingleChoice(items = myItems) { dialog, index, text ->                binding.tvList.text = text                sortList(text.toString())//sıralama için seçim yapıp apiye istek gönderme            }            positiveButton(R.string.yes)        }    }    private fun onSort() {//sıralanmış isteği recyclerview ile ekranda gösterme        adapter.items?.clear()        viewModel._productLiveData.observe(viewLifecycleOwner) { data ->            adapter.items = data?.let { ArrayList(it) }        }    }    private fun sortList(sort: String) {//sıralama için seçim yapıp apiye istek gönderme        arguments.let { bundle ->            val categoryId: String? = bundle?.let { arg -> ProductFragmentArgs.fromBundle(arg).categoryId }            categoryId?.let { id -> viewModel.getSort(id, sort) }        }        binding.tvList.text = sort    }    private fun openDetail(id: String?) {        id?.let {            Navigation.findNavController(requireView()).navigate(ProductFragmentDirections.actionProductFragmentToDetailFragment(it))        }    }    private fun onCompleted() {        viewModel._productLiveData.observe(viewLifecycleOwner) { data ->            adapter.items = data?.let { ArrayList(it) }        }        binding.tvList.text = "Price"    }    private fun onMessage(error: String) {        Log.e("backend hatası", error)    }}